<% action = action_name == "new_without_subaccount" ? "New" : action_name.capitalize %>

<%= form_with(model: sub_account_transaction, url: url, local: true, class: "needs-validation") do |form| %>
  <% if sub_account_transaction.errors.any? %>
    <div class="alert alert-danger">
      <h5 class="alert-heading">
        <%= pluralize(sub_account_transaction.errors.count, "error") %> prohibited this Transaction from being saved:
      </h5>
      <ul class="list-unstyled">
        <% sub_account_transaction.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row mb-3">
    <!-- Title -->
    <div class="col-6">
      <%= form.label :title, "Title", class: "form-label" %>
      <%= form.text_field :title, class: "form-control", placeholder: "Enter transaction title", autofocus: true %>
    </div>

    <!-- Amount -->
    <div class="col-6">
      <%= form.label :amount, "Amount (#{@main_account&.currency || 'â‚¬'})", class: "form-label" %>
      <%= form.number_field :amount, class: "form-control", placeholder: "Enter transaction amount" %>
    </div>
  </div>

  <!-- Type -->
  <div class="mb-3">
    <%= form.label :transaction_kind, "Type", class: "form-label" %>
    <%= form.select :transaction_kind, options_for_select(SubAccountTransaction::TRANSACTION_KINDS.map { |kind| [kind.capitalize, kind] }, sub_account_transaction.transaction_kind), {}, class: "form-select" %>
  </div>

  <!-- SubAccount Selection -->
  <div class="mb-3">
    <%= form.label :sub_account_id, "Select Account", class: "form-label" %>
    <div class="d-flex align-items-center">
      <%= form.collection_select :sub_account_id, @sub_accounts, :id, :title, { prompt: "Choose an Account" }, class: "form-select" %>
      <span id="sub-account-balance" class="badge bg-info fs-6 ms-3"></span>
    </div>
  </div>

  <!-- Category Selection -->
  <div class="mb-3">
    <%= form.label :category_id, "Category", class: "form-label" %>
    <%= form.collection_select :category_id, @categories, :id, :title, { prompt: "Choose a Category" }, class: "form-select" %>
  </div>

  <!-- Description -->
  <div class="mb-3">
    <%= form.label :description, "Description", class: "form-label" %>
    <%= form.text_area :description, class: "form-control", placeholder: "Enter transaction description" %>
  </div>

  <div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <%= form.submit "#{action} Transaction", class: "btn btn-primary me-md-2" %>
    <button type="button" class="btn btn-secondary" onclick="window.history.back()">Cancel</button>
  </div>
<% end %>

<script>
document.addEventListener("turbo:load", function() {
  const subAccountSelect = document.querySelector("[name='sub_account_transaction[sub_account_id]']");
  const categorySelect = document.querySelector("[name='sub_account_transaction[category_id]']");
  const balanceDisplay = document.getElementById("sub-account-balance");

  function fetchBalanceAndCategories(subAccountId) {
    if (!subAccountId) {
      balanceDisplay.textContent = "";
      categorySelect.innerHTML = '<option value="">Choose a Category</option>';
      return;
    }
    // Fetch and display the balance
    fetch(`/sub_accounts/${subAccountId}/balance.json`)
      .then(response => {
        if (!response.ok) throw new Error("Failed to fetch balance");
        return response.json();
      })
      .then(data => {
        if (data.balance !== undefined && data.balance !== null) {
          balanceDisplay.textContent = `$${parseFloat(data.balance).toFixed(2)}`;
        } else {
          balanceDisplay.textContent = "Balance not available";
        }
      })
      .catch(error => {
        console.error("Error fetching balance:", error);
        balanceDisplay.textContent = "Error fetching balance";
      });

    // Fetch and populate categories
    fetch(`/sub_accounts/${subAccountId}/categories.json`)
      .then(response => {
        if (!response.ok) throw new Error("Failed to fetch categories");
        return response.json();
      })
      .then(data => {
        const selectedCategory = categorySelect.value;
        categorySelect.innerHTML = '<option value="">Choose a Category</option>';
        data.forEach(category => {
          const option = document.createElement("option");
          option.value = category.id;
          option.textContent = category.title;
          categorySelect.appendChild(option);
        });

        // Restore the selected category if it was already set
        if (selectedCategory) {
          categorySelect.value = selectedCategory;
        } 
      })
      .catch(error => {
        console.error("Error fetching categories:", error);
        categorySelect.innerHTML = '<option value="">Error loading categories</option>';
      });
  }

  // Fetch balance and categories initially if a subaccount is selected
  if (subAccountSelect.value) {
    fetchBalanceAndCategories(subAccountSelect.value);
  }

  // Fetch balance and categories when dropdown value changes
  subAccountSelect.addEventListener("change", function() {
    fetchBalanceAndCategories(this.value);
  });
});
</script>
